// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: syn.proto

#include "syn.pb.h"
#include "syn.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* SynService_method_names[] = {
  "/SynService/Syn",
};

std::unique_ptr< SynService::Stub> SynService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SynService::Stub> stub(new SynService::Stub(channel));
  return stub;
}

SynService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Syn_(SynService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SynService::Stub::Syn(::grpc::ClientContext* context, const ::SynRequest& request, ::AckResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::SynRequest, ::AckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Syn_, context, request, response);
}

void SynService::Stub::experimental_async::Syn(::grpc::ClientContext* context, const ::SynRequest* request, ::AckResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::SynRequest, ::AckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Syn_, context, request, response, std::move(f));
}

void SynService::Stub::experimental_async::Syn(::grpc::ClientContext* context, const ::SynRequest* request, ::AckResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Syn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AckResponse>* SynService::Stub::PrepareAsyncSynRaw(::grpc::ClientContext* context, const ::SynRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::AckResponse, ::SynRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Syn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::AckResponse>* SynService::Stub::AsyncSynRaw(::grpc::ClientContext* context, const ::SynRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSynRaw(context, request, cq);
  result->StartCall();
  return result;
}

SynService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SynService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SynService::Service, ::SynRequest, ::AckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SynService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::SynRequest* req,
             ::AckResponse* resp) {
               return service->Syn(ctx, req, resp);
             }, this)));
}

SynService::Service::~Service() {
}

::grpc::Status SynService::Service::Syn(::grpc::ServerContext* context, const ::SynRequest* request, ::AckResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


